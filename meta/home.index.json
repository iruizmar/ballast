{
  "ownKey": "home",
  "ownPages": [
    {
      "reference": {
        "path": "",
        "baseUrl": "https://copper-leaf.github.io/ballast",
        "fileName": "",
        "extension": "html",
        "usePrettyUrl": true,
        "link": "https://copper-leaf.github.io/ballast"
      },
      "description": "",
      "title": "Home",
      "content": "<h1 id=\"ballast\"><a href=\"#ballast\" id=\"ballast\" class=\"anchor\"><\/a>Ballast<\/h1>\n<blockquote>\n<p>Opinionated Application State Management framework for Kotlin Multiplatform<\/p>\n<\/blockquote>\n<p><img src=\"https://img.shields.io/badge/Kotlin-1.7.10-orange\" alt=\"Kotlin Version\" />\n<a href=\"https://github.com/copper-leaf/ballast/releases\"><img src=\"https://img.shields.io/github/v/release/copper-leaf/ballast\" alt=\"GitHub release (latest by date)\" /><\/a>\n<a href=\"https://search.maven.org/artifact/io.github.copper-leaf/ballast-core\"><img src=\"https://img.shields.io/maven-central/v/io.github.copper-leaf/ballast-core\" alt=\"Maven Central\" /><\/a>\n<a href=\"https://plugins.jetbrains.com/plugin/18702-ballast\"><img src=\"https://img.shields.io/jetbrains/plugin/v/18702-ballast\" alt=\"Intellij Plugin Version\" /><\/a><\/p>\n<pre><code class=\"language-kotlin\">object TodosContract {\n  data class State(\n    val loading: Boolean = false,\n    val todos: List&lt;String&gt; = emptyList(),\n  )\n\n  sealed class Inputs {\n    object FetchSavedTodos : Inputs()\n    data class AddTodo(val text: String) : Inputs()\n    data class RemoveTodo(val text: String) : Inputs()\n  }\n}\n\nclass TodosInputHandler : InputHandler&lt;Inputs, Events, State&gt; {\n  override suspend fun InputHandlerScope&lt;Inputs, Events, State&gt;.handleInput(\n    input: TodosContract.Inputs\n  ) = when (input) {\n    is FetchSavedTodos -&gt; {\n      updateState { it.copy(loading = true) }\n      val todos = todosApi.fetchTodos()\n      updateState { it.copy(loading = false, todos = todos) }\n    }\n    is AddTodo -&gt; {\n      updateState { it.copy(todos = it.todos + input.text) }\n    }\n    is RemoveTodo -&gt; {\n      updateState { it.copy(todos = it.todos - input.text) }\n    }\n  }\n}\n\n@Composable\nfun App() {\n  val coroutineScope = rememberCoroutineScope()\n  val vm = remember(coroutineScope) { TodosViewModel(coroutineScope) }\n  val vmState by vm.observeStates().collectAsState()\n\n  LaunchedEffect(vm) {\n    vm.send(TodosContract.FetchSavedTodos)\n  }\n\n  TodosList(vmState) { vm.trySend(it) }\n}\n\n@Composable\nfun TodosList(\n  vmState: TodosContract.State,\n  postInput: (TodosContract.Inputs)-&gt;Unit,\n) {\n  // ...\n}\n<\/code><\/pre>\n<ul>\n<li><em>This snippet omits some details for brevity, to demonstrate the general idea<\/em><\/li>\n<\/ul>\n<h1 id=\"supported-platformsfeatures\"><a href=\"#supported-platformsfeatures\" id=\"supported-platformsfeatures\" class=\"anchor\"><\/a>Supported Platforms/Features<\/h1>\n<p>Ballast was intentionally designed to not be tied directly to any particular platform or UI toolkit. In fact, while most\nKotlin MVI libraries were initially developed for Android and show many artifacts of that initial base, Ballast started\nas a State Management solution for Compose Desktop.<\/p>\n<p>Because Ballast was initially designed entirely in a non-Android context, it should work in any Kotlin target or\nplatform as long as it works with Coroutines and Flows. However, the following targets are officially supported, in\nthat they have been tested and are known to work there, or have specific features for that platform<\/p>\n<ul>\n<li><a href=\"https://copper-leaf.github.io/ballast/wiki/platforms/android\">Android<\/a><\/li>\n<li><a href=\"https://copper-leaf.github.io/ballast/wiki/platforms/ios\">iOS<\/a> (requires new Kotlin Native Memory Model)<\/li>\n<li><a href=\"https://copper-leaf.github.io/ballast/wiki/platforms/compose-desktop\">Compose Desktop (JVM)<\/a><\/li>\n<li><a href=\"https://copper-leaf.github.io/ballast/wiki/platforms/compose-web\">Compose Web (JS)<\/a><\/li>\n<\/ul>\n<h1 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h1>\n<pre><code class=\"language-kotlin\">repositories {\n  mavenCentral()\n}\n\n// for plain JVM or Android projects\ndependencies {\n  implementation(&quot;io.github.copper-leaf:ballast-core:2.1.0&quot;)\n  implementation(&quot;io.github.copper-leaf:ballast-saved-state:2.1.0&quot;)\n  implementation(&quot;io.github.copper-leaf:ballast-repository:2.1.0&quot;)\n  implementation(&quot;io.github.copper-leaf:ballast-firebase-crashlytics:2.1.0&quot;)\n  implementation(&quot;io.github.copper-leaf:ballast-firebase-analytics:2.1.0&quot;)\n  implementation(&quot;io.github.copper-leaf:ballast-debugger:2.1.0&quot;)\n  testImplementation(&quot;io.github.copper-leaf:ballast-test:2.1.0&quot;)\n}\n\n// for multiplatform projects\nkotlin {\n  sourceSets {\n    val commonMain by getting {\n      dependencies {\n        implementation(&quot;io.github.copper-leaf:ballast-core:2.1.0&quot;)\n        implementation(&quot;io.github.copper-leaf:ballast-saved-state:2.1.0&quot;)\n        implementation(&quot;io.github.copper-leaf:ballast-repository:2.1.0&quot;)\n        implementation(&quot;io.github.copper-leaf:ballast-firebase-crashlytics:2.1.0&quot;)\n        implementation(&quot;io.github.copper-leaf:ballast-firebase-analytics:2.1.0&quot;)\n        implementation(&quot;io.github.copper-leaf:ballast-debugger:2.1.0&quot;)\n      }\n    }\n    val commonTest by getting {\n      dependencies {\n        implementation(&quot;io.github.copper-leaf:ballast-test:2.1.0&quot;)\n      }\n    }\n  }\n}\n<\/code><\/pre>\n<h1 id=\"documentation\"><a href=\"#documentation\" id=\"documentation\" class=\"anchor\"><\/a>Documentation<\/h1>\n<p>See the <a href=\"https://copper-leaf.github.io/ballast/\">website<\/a> for detailed documentation and usage instructions.<\/p>\n<h1 id=\"license\"><a href=\"#license\" id=\"license\" class=\"anchor\"><\/a>License<\/h1>\n<p>Ballast is licensed under the BSD 3-Clause License, see <a href=\"https://github.com/copper-leaf/ballast/tree/main/LICENSE.md\">LICENSE.md<\/a>.<\/p>\n<h1 id=\"references\"><a href=\"#references\" id=\"references\" class=\"anchor\"><\/a>References<\/h1>\n<p>Ballast is not new, it was built upon years of experience building UI applications in Android and observing the\ndirection UI programming has gone in the past few years. The MVI model has proven itself to be robust to a wide array\nof applications, and there are different implementations of the pattern that focus on different aspects of the pattern.<\/p>\n<p>The following are some of the main libraries I drew inspiration from while using Ballast. If Ballast does not fit your\nproject's needs, maybe one of these will suit you better. See the <a href=\"https://copper-leaf.github.io/ballast/wiki/feature-comparison/\">feature comparison<\/a> for a better breakdown of the\nspecific features of these libraries, to demonstrate the similarities and differences between them.<\/p>\n<ul>\n<li><a href=\"https://github.com/reduxjs/redux\">Redux<\/a>: The OG of the MVI programming model. It also was not the first MVI library, but React+Redux has certainly\nbeen one of the biggest contributors to this pattern's popularity today, especially in JS, but also in many other\ntech spaces<\/li>\n<li><a href=\"https://github.com/orbit-mvi/orbit-mvi\">Orbit MVI<\/a>: A primary source of inspiration for Ballast. This library is mature and well-built, but in my opinion\nwas built a little too closely to Android, making it less useful on other KMP targets. It also uses terminology from\nRedux like &quot;reducer&quot; and &quot;transformer&quot; that are intended to bridge the gap from users familiar with Redux, but are\na bit confusing for developers new to MVI. It is also missing some key features that one would expect from an MVI\nlibrary, like a graphical debugger.<\/li>\n<li><a href=\"https://www.youtube.com/watch?v=E6obYmkkdko\">How to write your own MVI system and why you shouldn't<\/a>: An intro video to the <a href=\"https://github.com/orbit-mvi/orbit-mvi\">Orbit MVI<\/a> library, and one of\nthe best introductions to the MVI model I've seen. By walking you through the thought process behind developing a\nsimple MVI library, it reinforces the concepts of the pattern and helps you understand how to use a mature MVI library\nlike Orbit or Ballast.<\/li>\n<\/ul>\n"
    },
    {
      "reference": {
        "path": "",
        "baseUrl": "https://copper-leaf.github.io/ballast",
        "fileName": "404",
        "extension": "html",
        "usePrettyUrl": false,
        "link": "https://copper-leaf.github.io/ballast/404.html"
      },
      "description": "",
      "title": "Not Found",
      "content": ""
    }
  ]
}